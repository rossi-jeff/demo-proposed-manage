datasource db {
    provider = "postgresql"
    url      = env("SCHOOL_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "../generated/school-db"
}

model Activity {
    id                                  String                                @id @default(cuid())
    schoolId                            String
    registerable                        Boolean?                              @default(false)
    active                              Boolean?                              @default(true)
    archived                            Boolean?                              @default(false)
    steps                               Int?                                  @default(0)
    emailFooter                         String?
    termsAndConditions                  String?
    kind                                String?
    leadInMessage                       String?
    noCut                               Boolean?                              @default(false)
    currentSeason                       String?                               @default("current season")
    athleticSeason                      String?                               @default("none")
    createdAt                           DateTime
    updatedAt                           DateTime
    CustomDiscounts                     CustomDiscount[]
    ParticipantInformationConfiguration ParticipantInformationConfiguration[]
    Settlements                         Settlement[]
    ActivityFee                         ActivityFee[]
    ActivityLegalForm                   ActivityLegalForm[]
}

model ActivityFee {
    id         String   @id @default(cuid())
    feeId      String
    activityId String
    createdAt  DateTime
    updatedAt  DateTime

    Activity Activity? @relation(fields: [activityId], references: [id])
    Fee      Fee       @relation(fields: [feeId], references: [id])
}

model ActivityLegalForm {
    id          String   @id @default(cuid())
    activityId  String
    legalFormId String
    createdAt   DateTime
    updatedAt   DateTime

    Activity  Activity? @relation(fields: [activityId], references: [id])
    LegalForm LegalForm @relation(fields: [legalFormId], references: [id])
}

model Address {
    id              String          @id @default(cuid())
    type            AddresTypeEnum
    lineOne         String?
    lineTwo         String?
    city            String?
    state           String?
    zipCode         String?
    createdAt       DateTime
    updatedAt       DateTime
    SchoolAddresses SchoolAddress[]
    PersonAddress   PersonAddress[]
}

enum AddresTypeEnum {
    PERSONAL
    BUSINESS
}

model Award {
    id        String   @id @default(cuid())
    schoolId  String
    name      String?
    position  Int?
    active    Boolean? @default(true)
    createdAt DateTime
    updatedAt DateTime
}

model Color {
    id        String   @id @default(cuid())
    name      String
    schoolId  String
    createdAt DateTime
    updatedAt DateTime
}

model CustomDiscount {
    id                 String   @id @default(cuid())
    schoolId           String
    kind               String?
    condition          Int?
    active             Boolean? @default(true)
    discountedFee      Int?
    activityId         String?
    secondaryCondition String?
    createdAt          DateTime
    updatedAt          DateTime

    Activity Activity? @relation(fields: [activityId], references: [id])
}

model CustomQuestion {
    id              String   @id @default(cuid())
    schoolId        String
    state           String?
    question        String?
    questionType    String?
    questionOptions String?
    active          Boolean?
    required        Boolean? @default(false)
    dependentOn     Int?
    dependentAnswer String?
    sortOrder       Int?
    activityType    String?
    createdAt       DateTime
    updatedAt       DateTime
}

model Email {
    id           String        @id @default(cuid())
    type         EmailTypeEnum
    address      String
    createdAt    DateTime
    updatedAt    DateTime
    SchoolEmails SchoolEmail[]
    PersonEmail  PersonEmail[]
}

enum EmailTypeEnum {
    PERSONAL
    BUSINESS
}

model FeatureForSeason {
    id        String   @id @default(cuid())
    schoolId  String?
    season    String?
    feature   String?
    createdAt DateTime
    updatedAt DateTime
}

model Fee {
    id          String        @id @default(cuid())
    name        String
    type        FeeTypeEnum
    amount      Int
    createdAt   DateTime
    updatedAt   DateTime
    SchoolFees  SchoolFee[]
    ActivityFee ActivityFee[]
}

enum FeeTypeEnum {
    FLAT
    PERCENTAGE
}

model FuelMyClubOrganization {
    id              String   @id @default(cuid())
    schoolId        String?  @unique
    data            String?  @db.Text
    fmcOrganization String?
    fmcFundraiser   String?
    fmcParticipant  String?
    salesLink       String?
    createdAt       DateTime
    updatedAt       DateTime
}

model LegalForm {
    id                    String              @id @default(cuid())
    schoolId              String
    name                  String?
    checkboxText          String?
    emailToChild          Boolean?
    file                  String?
    requireStudentSignOff Boolean?
    state                 Int?                @default(0)
    createdAt             DateTime
    updatedAt             DateTime
    ActivityLegalForm     ActivityLegalForm[]
}

model LegalVideo {
    id                    String   @id @default(cuid())
    schoolId              String
    name                  String?
    checkboxText          String?
    remoteId              String?
    requireStudentSignOff Boolean?
    createdAt             DateTime
    updatedAt             DateTime
}

model MedicalForm {
    id           String   @id @default(cuid())
    schoolId     String
    name         String?
    file         String?
    freshmanOnly Boolean?
    createdAt    DateTime
    updatedAt    DateTime
}

model ParticipantInformationConfiguration {
    id           String   @id @default(cuid())
    schoolId     String
    activityId   String
    key          String?
    visible      Boolean?
    required     Boolean?
    activityKind String?
    createdAt    DateTime
    updatedAt    DateTime
    Activity     Activity @relation(fields: [activityId], references: [id])
}

model PaymentCode {
    id        String   @id @default(cuid())
    schoolId  String
    name      String?
    code      String?
    active    Boolean? @default(true)
    createdAt DateTime
    updatedAt DateTime
}

model Person {
    id                       String          @id @default(cuid())
    userName                 String
    passWord                 String
    schoolId                 String?
    allowedToLogin           Boolean?        @default(false)
    firstName                String?
    lastName                 String?
    sex                      String?
    birthDate                DateTime?       @db.Date
    highSchoolGraduationYear String?
    insuranceCompany         String?
    insuranceAccountNumber   String?
    physicianName            String?
    physicianPhone           String?
    studentId                String?
    schoolTransferredFrom    String?
    medicalInformation       String?         @db.Text
    acceptsCOPPA             Boolean?
    optsInToCommunications   Boolean?        @default(true)
    physicalDate             DateTime?       @db.Date
    credit                   Int?
    ethnicity                String?
    firstEnrollmentDate      DateTime?       @db.Date
    participationStatus      String?
    gpa                      Float?
    felonyInfo               Int?            @default(0)
    notifications            Int?            @default(31)
    concussionTestDate       DateTime?       @db.Date
    adData                   String?         @db.Text
    createdAt                DateTime
    updatedAt                DateTime
    SubjectRelationship      Relationship[]  @relation("subject")
    ReceiverRelationship     Relationship[]  @relation("receiver")
    PersonAddress            PersonAddress[]
    PersonEmail              PersonEmail[]
    PersonPhone              PersonPhone[]
    PersonRole               PersonRole[]
}

model PersonAddress {
    id        String   @id @default(cuid())
    personId  String
    addressId String
    createdAt DateTime
    updatedAt DateTime
    Address   Address  @relation(fields: [addressId], references: [id])
    Person    Person   @relation(fields: [personId], references: [id])
}

model PersonEmail {
    id        String   @id @default(cuid())
    personId  String
    emailId   String
    createdAt DateTime
    updatedAt DateTime
    Email     Email    @relation(fields: [emailId], references: [id])
    Person    Person   @relation(fields: [personId], references: [id])
}

model PersonPhone {
    id        String   @id @default(cuid())
    personId  String
    phoneId   String
    createdAt DateTime
    updatedAt DateTime
    Phone     Phone    @relation(fields: [phoneId], references: [id])
    Person    Person   @relation(fields: [personId], references: [id])
}

model PersonRole {
    id        String   @id @default(cuid())
    personId  String
    roleId    String
    createdAt DateTime
    updatedAt DateTime
    Person    Person   @relation(fields: [personId], references: [id])
}

model Phone {
    id           String        @id @default(cuid())
    type         PhoneTypeEnum
    number       String
    createdAt    DateTime
    updatedAt    DateTime
    SchoolPhones SchoolPhone[]
    PersonPhone  PersonPhone[]
}

enum PhoneTypeEnum {
    HOME
    OFFICE
    FAX
    CELL
}

model Relationship {
    id               String   @id @default(cuid())
    subjectId        String?
    receiverId       String?
    relationshipType String?
    createdAt        DateTime
    updatedAt        DateTime

    Subject  Person? @relation(fields: [subjectId], references: [id], name: "subject")
    Receiver Person? @relation(fields: [receiverId], references: [id], name: "receiver")
}

model SchoolAddress {
    id        String   @id @default(cuid())
    schoolId  String
    addressId String
    createdAt DateTime
    updatedAt DateTime
    Address   Address  @relation(fields: [addressId], references: [id])
}

model SchoolEmail {
    id        String   @id @default(cuid())
    schoolId  String
    emailId   String
    createdAt DateTime
    updatedAt DateTime
    Email     Email    @relation(fields: [emailId], references: [id])
}

model SchoolFee {
    id        String   @id @default(cuid())
    schoolId  String
    feeId     String
    createdAt DateTime
    updatedAt DateTime
    Fee       Fee      @relation(fields: [feeId], references: [id])
}

model SchoolPhone {
    id        String   @id @default(cuid())
    schoolId  String
    phoneId   String
    createdAt DateTime
    updatedAt DateTime

    Phone Phone @relation(fields: [phoneId], references: [id])
}

model Settlement {
    id               String    @id @default(cuid())
    activityId       String?
    schoolId         String?
    startDate        DateTime? @db.Date
    endDate          DateTime? @db.Date
    amountCollected  Int?
    fees             Int?
    amountSettled    Int?
    percentage       Int?
    amountPaid       Int?
    amountRemaining  Int?
    final            Boolean?
    flatFee          Int?
    percentageFee    Int?
    manualFee        Int?
    participantCount Int?
    kind             Int?      @default(0)
    approval         Int?      @default(0)
    activityKind     String?
    createdAt        DateTime
    updatedAt        DateTime

    Activity Activity? @relation(fields: [activityId], references: [id])
}
